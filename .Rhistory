lower <- c(-1, -2, -Inf)
upper <- c(3, 4, 6)
mean <- c(-1, 2, 3)
prob <- pmvnorm(lower, upper, mean, sigma=sigma2)
prob
library(mvtnorm)
# Normal Multivariada ..................
# función mvtnorm y pmvt
library(mvtnorm)
library(mvtnorm)
prob
## PUNTO 3
sigma2 <- matrix(c(10, 4, 4, 4, 20, 10, 4, 10, 20), ncol = 3)
sigma2
lower <- c(-1, -2, -Inf)
upper <- c(3, 4, 6)
mean <- c(-1, 2, 3)
prob <- pmvnorm(lower, upper, mean, sigma=sigma2)
prob
## PUNTO 4
sigma2 <- matrix(c(7, 3, -3, 3, 6, 0, -3, 0, 5), ncol = 3)
sigma2
lower <- c(-1, -2, -Inf)
upper <- c(3, 4, 6)
mean <- c(-1, 0, -3)
prob <- pmvnorm(lower, upper, mean, sigma=sigma2)
prob
#### Pruebas de Hipotesis ####
datos <- c(355, 353, 352, 346, 345, 345, 353, 353, 344, 350)
qqnorm(datos)
require(nortest)
install.packages("nortest")
#### Pruebas de Hipotesis ####
cerveza <- c(355, 353, 352, 346, 345, 345, 353, 353, 344, 350)
#prueba de normalidad
qqnorm(cerveza)
#para prueba de normalidad
require(nortest)
ad.test(cerveza)
mean(cerveza)
var(cerveza)
sqrt(var(cerveza))
pnorm(-0.2530)
pnorm(-0.2)
pnorm(-0.02)
vector1 <- c()
for (i in 1:50) {
lista <- tasa(k=i, data_tr=data_tr, data_vl = data_vl, formula_mod = modelo)
vector1[i] <- lista
}
salida <- data.frame(c(1:200), vector1)
vector1 <- c()
for (i in 1:50) {
lista <- tasa(k=i, data_tr=data_tr, data_vl = data_vl, formula_mod = modelo)
vector1[i] <- lista
}
datos <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer.data", sep = ",")
nombres <- c("Class","age", "menopause", " tumor-size", "inv-nodes", "node-caps", "deg-malig", "breast", "breast-quad", "irradiat")
names(datos) <- nombres
datos$Class <- factor(datos$Class)
datos$age <- factor(datos$age)
datos$menopause <- factor(datos$menopause)
datos$`inv-nodes` <- factor(datos$`inv-nodes`)
datos$`node-caps` <- factor(datos$`node-caps`)
datos$breast <- factor(datos$breast)
datos$`breast-quad` <- factor(datos$`breast-quad`)
datos$` tumor-size` <- factor(datos$` tumor-size`)
datos$irradiat <- factor(datos$irradiat)
datos$`deg-malig` <-factor(datos$`deg-malig`)
p_tr<-0.7
N_datos<-dim(datos)[1]
n_tr<-round(N_datos*p_tr)
ix_tr<-sample(N_datos,n_tr,replace = FALSE) # tomar muestra de indices
datos_tr<-datos[ix_tr,] # conjunto de entrenamiento
dim(datos_tr)
datos_val<-datos[-ix_tr,] # conjunto de validación validación
dim(datos_val)
library(caret)  # libreria para trabajar los k vecinos mas cercanos
names(datos)
head(datos_tr)
library(kknn)
adv_knn<- train.kknn(Class~., data=datos_tr, kmax=4) # evalúa el método con k=3
y_tr_pred<-predict(adv_knn, datos_val)
datos2 <- data.frame(y_tr_pred, datos_val$Class)
View(datos2)
# Validando el modelo
cont <- 0
for (i in 1:dim(datos_val)[1]){
if (y_tr_pred[i] == datos_val$Class[i])
cont=cont+1
else
cont=cont
}
cont
tocc<- cont/dim(datos_val)[1]
tocc
cont <- 0
tasa<-function(k, data_tr, data_vl, formula_mod){
adv_knn<- train.kknn(formula_mod, data=datos_tr, kmax=k)
y_tr_pred<-predict(adv_knn, datos_val)
for (i in 1:dim(datos_val)[1]){
if (y_tr_pred[i] == datos_val$Class[i])
cont=cont+1
else
cont=cont
}
cont
tocc<- cont/dim(datos_val)[1]
print(tocc)
#listas <- rbind(0, tocc)
}
modelo <- formula("Class~.")
vector1 <- c()
for (i in 1:50) {
lista <- tasa(k=i, data_tr=data_tr, data_vl = data_vl, formula_mod = modelo)
vector1[i] <- lista
}
salida <- data.frame(c(1:50), vector1)
salida
getwd()
setwd("D:/National university of Colombia/Tecnicas en aprendizaje estadistico/Trabajos/statisoft2.0_TAE_MadresSolteras/")
setwd("~/")
# Leyendo la base de datos-------------------------------------
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
# Leyendo la base de datos-------------------------------------
library(readxl)
getwd()
setwd("D:/National university of Colombia/Tecnicas en aprendizaje estadistico/Trabajos/statisoft2.0_TAE_MadresSolteras")
# Leyendo la base de datos-------------------------------------
library(readxl)
getDatosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
#View(Tabla_Pequena_Filtrada)
#View(Datosssm)
## Dimension de la base de datos...........................................
dim(Datosssm)
summary(Datosssm)
# Leyendo la base de datos-------------------------------------
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
rm(list = ls)
rm(list = ls())
# Leyendo la base de datos-------------------------------------
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
#View(Tabla_Pequena_Filtrada)
#View(Datosssm)
## Dimension de la base de datos...........................................
dim(Datosssm)
summary(Datosssm)
names(Datosssm2)
setwd("D:/National university of Colombia/Tecnicas en aprendizaje estadistico/Trabajos/statisoft2.0_TAE_MadresSolteras")
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
datos <- Datosssm[,colSums(is.na(Datosssm))==0]
datos <- datos[,-c(1,2)]
datos <- data.frame(datos)
head(datos, 2)
datos$P5502 <- factor(datos$P5502)   ## autualmente .. 3 viuda, 5 soltera
datos$P6081 <- factor(datos$P6081)  # padre vive en el hogar
datos$P6083 <- factor(datos$P6083) # la madre vive en este hogar
datos$P6080 <- factor(datos$P6080) # a que cultura pertenece
datos$P1896 <- factor(datos$P1896) # satisfaccion con el ingreso
datos$P1897 <- factor(datos$P1897) # satisfaccion con la salud
datos$P1898 <- factor(datos$P1898) # satisfecho con el nivel de seguridad
datos$P1901 <- factor(datos$P1901) # feliz el dia de ayer
datos$P1899 <- factor(datos$P1899) # satisfecho con el trabajo
datos$P1902 <- factor(datos$P1902) # tranquilo el dia de ayer
datos$P1903 <- factor(datos$P1903) # preocupado el dia de ayer
datos$P1904 <- factor(datos$P1904) # triste el dia de ayer
datos$P1905 <- factor(datos$P1905) # las cosas que hace en su vida valen la pena?
datos$P1910 <- factor(datos$P1910) # utiliza _____ computador de escritorio (en cualquier lugar)?
datos$P1911 <- factor(datos$P1911) # utiliza _____ portatil (en cualquier lugar)?
datos$P1912 <- factor(datos$P1912) # utiliza _____ tablet (en cualquier lugar)?
datos$P1083S3 <- factor(datos$P1083S3) # utiliza _____ redes sociales ?
datos$P1082 <- factor(datos$P1082) # utiliza _____ celular ?
# Variable respuesta
datos$P1895 <- factor(datos$P1895) # Nivel de satisfaccion
## Escalando los datos
summary(datos)
# hay que estraer un subset con las variables seleccionadas.
datos <- subset(P1895 ~ P1896 + P1897 + P1898 + P1901 + P1902 + P1905 + N_HIJOS + N_NIETOS + N_HIJOS:N_NIETOS, family =multinom(), data = Datosssm2)
datos$P804 <- factor(datos$P804) # radio
datos$P1084 <- factor(datos$P1084) # utiliza _____ intenet ?
rm(list = ls())
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
datos <- Datosssm[,colSums(is.na(Datosssm))==0]
datos <- datos[,-c(1,2)]
datos <- data.frame(datos)
head(datos, 2)
datos$P5502 <- factor(datos$P5502)   ## autualmente .. 3 viuda, 5 soltera
datos$P6081 <- factor(datos$P6081)  # padre vive en el hogar
datos$P6083 <- factor(datos$P6083) # la madre vive en este hogar
datos$P6080 <- factor(datos$P6080) # a que cultura pertenece
datos$P1896 <- factor(datos$P1896) # satisfaccion con el ingreso
datos$P1897 <- factor(datos$P1897) # satisfaccion con la salud
datos$P1898 <- factor(datos$P1898) # satisfecho con el nivel de seguridad
datos$P1899 <- factor(datos$P1899) # satisfecho con el trabajo
datos$P1901 <- factor(datos$P1901) # feliz el dia de ayer
datos$P1902 <- factor(datos$P1902) # tranquilo el dia de ayer
datos$P1903 <- factor(datos$P1903) # preocupado el dia de ayer
datos$P1904 <- factor(datos$P1904) # triste el dia de ayer
datos$P1905 <- factor(datos$P1905) # las cosas que hace en su vida valen la pena?
datos$P1910 <- factor(datos$P1910) # utiliza _____ computador de escritorio (en cualquier lugar)?
datos$P1911 <- factor(datos$P1911) # utiliza _____ portatil (en cualquier lugar)?
datos$P1912 <- factor(datos$P1912) # utiliza _____ tablet (en cualquier lugar)?
datos$P1084 <- factor(datos$P1084) # utiliza _____ intenet ?
datos$P1083S3 <- factor(datos$P1083S3) # utiliza _____ redes sociales ?
datos$P1082 <- factor(datos$P1082) # utiliza _____ celular ?
datos$P804 <- factor(datos$P804) # radio
# hay que estraer un subset con las variables seleccionadas.
datos <- subset(P1895 ~ P1896 + P1897 + P1898 + P1901 + P1902 + P1905 + N_HIJOS + N_NIETOS + N_HIJOS:N_NIETOS, family =multinom(), data = Datosssm2)
library(readxl)
Datosssm <- read_excel("Databases/Tabla_Pequena_Filtrada.xlsx")
datos <- Datosssm[,colSums(is.na(Datosssm))==0]
datos <- datos[,-c(1,2)]
datos <- data.frame(datos)
head(datos, 2)
colSums(datos, is.na(datos))
apply(datos, 2, function(x) sum(is.na(x)))
datos$P5502 <- factor(datos$P5502)   ## autualmente .. 3 viuda, 5 soltera
datos$P6081 <- factor(datos$P6081)  # padre vive en el hogar
datos$P6083 <- factor(datos$P6083) # la madre vive en este hogar
datos$P6080 <- factor(datos$P6080) # a que cultura pertenece
datos$P1896 <- factor(datos$P1896) # satisfaccion con el ingreso
datos$P1897 <- factor(datos$P1897) # satisfaccion con la salud
datos$P1898 <- factor(datos$P1898) # satisfecho con el nivel de seguridad
datos$P1899 <- factor(datos$P1899) # satisfecho con el trabajo
datos$P1901 <- factor(datos$P1901) # feliz el dia de ayer
datos$P1902 <- factor(datos$P1902) # tranquilo el dia de ayer
datos$P1903 <- factor(datos$P1903) # preocupado el dia de ayer
datos$P1904 <- factor(datos$P1904) # triste el dia de ayer
datos$P1905 <- factor(datos$P1905) # las cosas que hace en su vida valen la pena?
datos$P1910 <- factor(datos$P1910) # utiliza _____ computador de escritorio (en cualquier lugar)?
datos$P1911 <- factor(datos$P1911) # utiliza _____ portatil (en cualquier lugar)?
datos$P1912 <- factor(datos$P1912) # utiliza _____ tablet (en cualquier lugar)?
datos$P1084 <- factor(datos$P1084) # utiliza _____ intenet ?
datos$P1083S3 <- factor(datos$P1083S3) # utiliza _____ redes sociales ?
datos$P1082 <- factor(datos$P1082) # utiliza _____ celular ?
datos$P804 <- factor(datos$P804) # radio
# hay que estraer un subset con las variables seleccionadas.
datos <- subset(P1895 ~ P1896 + P1897 + P1898 + P1901 + P1902 + P1905 + N_HIJOS + N_NIETOS + N_HIJOS:N_NIETOS, family =multinom(), data = Datosssm2)
datos$P804 <- factor(datos$P804) # radio
## Escalando los datos
summary(datos)
## Modelo0 **
mod0 <- lm(P1895~., datos)
summary(mod0) #0.4768 r^2 (suponiendo variable respuesta como cuantitativa)
FORM1 <- as.formula("~(N_HIJOS+N_NIETOS+P6040)^2+P6040+P5502+P6080+P1896+P1897+P1898+P1899+P1901+P1902+P1903+P1904+P1905+N_HIJOS+N_NIETOS+P1910+P1911+P1912+P1084+P1083S3+P1082")   # definimos todas las variables solas e interacciones entre ellas
library(gamlss)
mod1 <- gamlss(P1895~.,
data = Datosssm2)
xtable(summary(mod1))
library(gamlss)
mod1 <- gamlss(P1895~.,
data = Datosssm2)
library(gamlss)
mod1 <- gamlss(P1895~.,
data = datos)
mod1 <- gamlss(P1895~.,
data = datos)
## Modelo0 **
mod0 <- lm(P1895~., datos)
summary(mod0) #0.4768 r^2 (suponiendo variable respuesta como cuantitativa)
library(gamlss)
mod1 <- gamlss(P1895~.,
data = datos)
summary(mod1)
names(mod1)
FORM1 <- as.formula("~(N_HIJOS+N_NIETOS+P6040)^2+P6040+P5502+P6080+P1896+P1897+P1898+P1899+P1901+P1902+P1903+P1904+P1905+N_HIJOS+N_NIETOS+P1910+P1911+P1912+P1084+P1083S3+P1082")   # definimos todas las variables solas e interacciones entre ellas
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction = 'both')
FORM1 <- as.formula("~(N_HIJOS+N_NIETOS+P6040)^2+P6040+P5502+P6080+P1896+P1897+P1898+P1899+P1901+P1902+P1903+P1904+P1905+N_HIJOS+N_NIETOS+P1910+P1911+P1912+P1084+P1083S3+P1082")   # definimos todas las variables solas e interacciones entre ellas
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction = 'both')
names(datos)
FORM1 <- as.formula("~P6040+ P5502+ P6081+ P6083+ P6080+ P1895
P1896+ P1897+ P1898+ P1899+ P1901+ P1902
P1903+ P1904+ P1905+ (N_HIJOS+N_NIETOS)^2 + P1910
P1911+ P1912+ P1084+ P1083S3+P1082+P804")
mod2<- stepGAIC(mod1+ scope=list(lower=~1+ upper=FORM1)+ direction = 'both')
names(datos)
FORM1 <- as.formula("~P6040+P5502+P6081+P6083+P6080+P1895+
P1896+P1897+P1898+P1899+P1901+P1902+
P1903+P1904+P1905+(N_HIJOS+N_NIETOS)^2+P1910+
P1911+P1912+P1084+P1083S3+P1082+P804")
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction = 'both')
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="backward" )
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="forward" )
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="both" )
summary(mod2)
Rsq(mod2)
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 +
N_HIJOS + N_NIETOS + N_HIJOS:N_NIETOS + P1084 + P1083S3 ")
formula2
mod3<- lm(formula = formula2, datos)
summary(mode3)
mod3<- lm(formula = formula2, datos)
summary(mod3)
mod3<- lm(formula = formula2, datos)
summary(mod3)
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 +
N_HIJOS + N_NIETOS + N_HIJOS:N_NIETOS + P1084 + P1083S3")
Rsq(mod2)
mod3<- lm(formula = formula2, datos)
summary(mod3)
library(e1071)
clasificadorSVM <- svm(formula2., data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
library(e1071)
clasificadorSVM <- svm(formula2., data = datos,
type = 'C-classification', kernel = 'radial')
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
# Clasificador Bayesiano Ingenuo (Naive Bayes Classifier) (excelente)
library(e1071)
clasificadorBayes <- naiveBayes(formula2, data = datos)
pred_valid_bayes <- predict(clasificadorBayes, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_bayes)
# Clasificador Bayesiano Ingenuo (Naive Bayes Classifier) (excelente)
library(e1071)
clasificadorBayes <- naiveBayes(formula2, data = datos)
pred_valid_bayes <- predict(clasificadorBayes, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_bayes)
matrizConfusion
library(rpart)
clasificadorDT <- rpart(formula2, data = datos)
pred_valid_DT <- predict(clasificadorDT, newdata = datos, type = 'class')
clasificadorDT <- rpart(formula2, data = datos)
pred_valid_DT <- predict(clasificadorDT, newdata = datos, type = 'class')
matrizConfusion <- table(datos$P1895, pred_valid_DT)
matrizConfusion
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
clasificadorRF <- randomForest(formula2, data = datos, ntree = 250)
pred_valid_RF <- predict(clasificadorRF, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_RF)
matrizConfusion
FORM1 <- as.formula("~P6040+P5502+P6081+P6083+P6080+P1895+
P1896+P1897+P1898+P1899+P1901+P1902+
P1903+P1904+P1905+N_HIJOS+N_NIETOS+P1910+
P1911+P1912+P1084+P1083S3+P1082+P804")
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="both" )
summary(mod2)
# resultado
Rsq(mod2)
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="bsckward" )
mod2<- stepGAIC(mod1, scope=list(lower=~1, upper=FORM1), direction ="backward" )
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 +
N_HIJOS + N_NIETOS + P1084 + P1083S3")
mod3<- lm(formula = formula2, datos)
summary(mod3)
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 +
N_NIETOS ")
mod3<- lm(formula = formula2, datos)
summary(mod3)
summary(mod3)
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 + N_HIJOS + N_NIETOS + P1084 + P1083S3")
mod3<- lm(formula = formula2, datos)
summary(mod3)
xtabs(summary(mod3))
library(xtable)
xtable(summary(mod3))
# Variable respuesta
datos$P1895 <- factor(datos$P1895) # Nivel de satisfaccion
## Escalando los datos
summary(datos)
formula2 <- as.formula("P1895 ~ P6040 + P1896 + P1897 + P1898 + P1901 + P1902 + P1905 + N_HIJOS + N_NIETOS + P1084 + P1083S3")
library(e1071)
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
r
clasificadorRL <- glm(TipoEstrella ~ ., family = multinomia, data = training_set)
clasificadorRL <- glm(formula2, family = binomial, data = training_set)
clasificadorRL <- glm(formula2, family = binomial, data = datos)
summary(clasificadorRL)
clasificadorRL$fitted.values
exp(clasificadorRL$fitted.values)
hist(exp(clasificadorRL$fitted.values))
summary(clasificadorRL)
hist(exp(clasificadorRL$fitted.values))
hist(clasificadorRL$fitted.values)
library(e1071)
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
library(e1071)
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
xtable(matrizConfusion)
# Clasificador Bayesiano Ingenuo (Naive Bayes Classifier) (excelente)
library(e1071)
clasificadorBayes <- naiveBayes(formula2, data = datos)
pred_valid_bayes <- predict(clasificadorBayes, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_bayes)
matrizConfusion
xtable(matrizConfusion)
library(rpart)
clasificadorDT <- rpart(formula2, data = datos)
pred_valid_DT <- predict(clasificadorDT, newdata = datos, type = 'class')
matrizConfusion <- table(datos$P1895, pred_valid_DT)
matrizConfusion
matrizConfusion
matrizConfusion
xtable(matrizConfusion)
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
clasificadorRF <- randomForest(formula2, data = datos, ntree = 250)
pred_valid_RF <- predict(clasificadorRF, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_RF)
matrizConfusion
xtable(matrizConfusion)
library(e1071)
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
diag(matrizConfusion)
sum(diag(matrizConfusion))
dim(datos)
sum(diag(matrizConfusion))/ dim(datos)[1]
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
clasificadorRF <- randomForest(formula2, data = datos, ntree = 250)
pred_valid_RF <- predict(clasificadorRF, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_RF)
matrizConfusion
sum(diag(matrizConfusion))/dim(datos)[1]
sum(diag(matrizConfusion))
dim(datos)[1]
898/901
1-0.979
library(e1071)
clasificadorSVM <- svm(formula2, data = datos,
type = 'C-classification', kernel = 'radial')
pred_valid_svm <- predict(clasificadorSVM, newdata = datos)
# haciend la matriz de confusion
matrizConfusion <- table(datos$P1895, pred_valid_svm)
matrizConfusion
sum(diag(matrizConfusion))/dim(datos)[1]
sum(diag(matrizConfusion))
sum(diag(matrizConfusion))-dim(datos)[1]
dim(datos)[1]-sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
# Clasificador Bayesiano Ingenuo (Naive Bayes Classifier) (excelente)
library(e1071)
clasificadorBayes <- naiveBayes(formula2, data = datos)
pred_valid_bayes <- predict(clasificadorBayes, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_bayes)
matrizConfusion
sum(diag(matrizConfusion))
dim(datos)[1]-sum(diag(matrizConfusion))
491+410
dim(datos)[1]
dim(datos)[1]-sum(diag(matrizConfusion))
sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
library(rpart)
clasificadorDT <- rpart(formula2, data = datos)
pred_valid_DT <- predict(clasificadorDT, newdata = datos, type = 'class')
matrizConfusion <- table(datos$P1895, pred_valid_DT)
matrizConfusion
sum(diag(matrizConfusion))
sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
dim(datos)[1]-sum(diag(matrizConfusion))
dim(datos)[1]-sum(diag(matrizConfusion))
dim(datos)[1]-sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
clasificadorRF <- randomForest(formula2, data = datos, ntree = 250)
pred_valid_RF <- predict(clasificadorRF, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_RF)
matrizConfusion
sum(diag(matrizConfusion))
dim(datos)[1]-sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
#Clasificador con Bosques Aleatorios (Random Forests Classifier)  *****
library(randomForest)
clasificadorRF <- randomForest(formula2, data = datos, ntree = 250)
pred_valid_RF <- predict(clasificadorRF, newdata = datos)
matrizConfusion <- table(datos$P1895, pred_valid_RF)
matrizConfusion
sum(diag(matrizConfusion))
dim(datos)[1]-sum(diag(matrizConfusion))
sum(diag(matrizConfusion))/dim(datos)[1]
